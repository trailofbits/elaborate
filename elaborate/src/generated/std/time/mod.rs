// This file was automatically generated by `elaborate`.
// https://github.com/smoelius/elaborate

#[allow(unused_imports)]
use anyhow::Context;



pub trait InstantContext: Sized {
fn checked_add_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > );
fn checked_duration_since_wc ( & self , earlier : std :: time :: Instant ) -> crate :: rewrite_output_type ! ( core :: option :: Option < core :: time :: Duration > );
fn checked_sub_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > );
}
impl InstantContext for std :: time :: Instant {
fn checked_add_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > ) {
    std :: time :: Instant :: checked_add(self, duration)
        .with_context(|| crate::call_failed!(Some(self), "checked_add", duration))
}
fn checked_duration_since_wc ( & self , earlier : std :: time :: Instant ) -> crate :: rewrite_output_type ! ( core :: option :: Option < core :: time :: Duration > ) {
    std :: time :: Instant :: checked_duration_since(self, earlier)
        .with_context(|| crate::call_failed!(Some(self), "checked_duration_since", earlier))
}
fn checked_sub_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > ) {
    std :: time :: Instant :: checked_sub(self, duration)
        .with_context(|| crate::call_failed!(Some(self), "checked_sub", duration))
}
}
pub trait SystemTimeContext: Sized {
fn checked_add_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > );
fn checked_sub_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > );
fn duration_since_wc ( & self , earlier : std :: time :: SystemTime ) -> crate :: rewrite_output_type ! ( core :: result :: Result < core :: time :: Duration , std :: time :: SystemTimeError > );
fn elapsed_wc ( & self ) -> crate :: rewrite_output_type ! ( core :: result :: Result < core :: time :: Duration , std :: time :: SystemTimeError > );
}
impl SystemTimeContext for std :: time :: SystemTime {
fn checked_add_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > ) {
    std :: time :: SystemTime :: checked_add(self, duration)
        .with_context(|| crate::call_failed!(Some(self), "checked_add", duration))
}
fn checked_sub_wc ( & self , duration : core :: time :: Duration ) -> crate :: rewrite_output_type ! ( core :: option :: Option < Self > ) {
    std :: time :: SystemTime :: checked_sub(self, duration)
        .with_context(|| crate::call_failed!(Some(self), "checked_sub", duration))
}
fn duration_since_wc ( & self , earlier : std :: time :: SystemTime ) -> crate :: rewrite_output_type ! ( core :: result :: Result < core :: time :: Duration , std :: time :: SystemTimeError > ) {
    std :: time :: SystemTime :: duration_since(self, earlier)
        .with_context(|| crate::call_failed!(Some(self), "duration_since", earlier))
}
fn elapsed_wc ( & self ) -> crate :: rewrite_output_type ! ( core :: result :: Result < core :: time :: Duration , std :: time :: SystemTimeError > ) {
    std :: time :: SystemTime :: elapsed(self)
        .with_context(|| crate::call_failed!(Some(self), "elapsed"))
}
}

