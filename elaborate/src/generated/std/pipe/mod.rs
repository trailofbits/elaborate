// This file was automatically generated by `elaborate`.
// https://github.com/smoelius/elaborate

#[allow(unused_imports)]
use anyhow::Context;



#[cfg(feature = "anonymous_pipe")]
pub trait PipeReaderContext: Sized {
fn try_clone_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < Self > );
}
#[cfg(feature = "anonymous_pipe")]
impl PipeReaderContext for std :: pipe :: PipeReader {
fn try_clone_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < Self > ) {
    std :: pipe :: PipeReader :: try_clone(self)
        .with_context(|| crate::call_failed!(Some(self), "try_clone"))
}
}
#[cfg(feature = "anonymous_pipe")]
pub trait PipeWriterContext: Sized {
fn try_clone_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < Self > );
}
#[cfg(feature = "anonymous_pipe")]
impl PipeWriterContext for std :: pipe :: PipeWriter {
fn try_clone_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < Self > ) {
    std :: pipe :: PipeWriter :: try_clone(self)
        .with_context(|| crate::call_failed!(Some(self), "try_clone"))
}
}


#[cfg(feature = "anonymous_pipe")]
pub fn pipe_wc ( ) -> crate :: rewrite_output_type ! ( std :: io :: Result < ( std :: pipe :: PipeReader , std :: pipe :: PipeWriter ) > ) {
    std :: pipe :: pipe()
        .with_context(|| crate::call_failed!(None::<()>, "std::pipe::pipe"))
}
