// This file was automatically generated by `elaborate`.
// https://github.com/smoelius/elaborate

#[allow(unused_imports)]
use anyhow::Context;


#[cfg(feature = "linux_pidfd")]
#[cfg(target_os = "linux")]
pub trait ChildExtContext: std :: os :: linux :: process :: ChildExt {
fn pidfd_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < & std :: os :: linux :: process :: PidFd > ) {
    < Self as :: std :: os :: linux :: process :: ChildExt > :: pidfd(self)
        .with_context(|| crate::call_failed!(Some(self), "pidfd"))
}
}

#[cfg(feature = "linux_pidfd")]
#[cfg(target_os = "linux")]
impl<T> ChildExtContext for T where T: std :: os :: linux :: process :: ChildExt {}

#[cfg(feature = "linux_pidfd")]
#[cfg(target_os = "linux")]
pub trait PidFdContext {
fn kill_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < ( ) > );
fn try_wait_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < core :: option :: Option < std :: process :: ExitStatus > > );
fn wait_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < std :: process :: ExitStatus > );
}
#[cfg(feature = "linux_pidfd")]
#[cfg(target_os = "linux")]
impl PidFdContext for std :: os :: linux :: process :: PidFd {
fn kill_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < ( ) > ) {
    std :: os :: linux :: process :: PidFd :: kill(self)
        .with_context(|| crate::call_failed!(Some(self), "kill"))
}
fn try_wait_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < core :: option :: Option < std :: process :: ExitStatus > > ) {
    std :: os :: linux :: process :: PidFd :: try_wait(self)
        .with_context(|| crate::call_failed!(Some(self), "try_wait"))
}
fn wait_wc ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < std :: process :: ExitStatus > ) {
    std :: os :: linux :: process :: PidFd :: wait(self)
        .with_context(|| crate::call_failed!(Some(self), "wait"))
}
}

