// This file was automatically generated by `elaborate`.
// https://github.com/smoelius/elaborate

#[allow(unused_imports)]
use anyhow::Context;





pub fn current_dir_wc ( ) -> crate :: rewrite_output_type ! ( std :: io :: Result < std :: path :: PathBuf > ) {
    std :: env :: current_dir()
        .with_context(|| crate::call_failed!(None::<()>, "std::env::current_dir"))
}
pub fn current_exe_wc ( ) -> crate :: rewrite_output_type ! ( std :: io :: Result < std :: path :: PathBuf > ) {
    std :: env :: current_exe()
        .with_context(|| crate::call_failed!(None::<()>, "std::env::current_exe"))
}
pub fn home_dir_wc ( ) -> crate :: rewrite_output_type ! ( core :: option :: Option < std :: path :: PathBuf > ) {
    std :: env :: home_dir()
        .with_context(|| crate::call_failed!(None::<()>, "std::env::home_dir"))
}
pub fn join_paths_wc < I , T > ( paths : I ) -> crate :: rewrite_output_type ! ( core :: result :: Result < std :: ffi :: OsString , std :: env :: JoinPathsError > ) where I : core :: iter :: IntoIterator < Item = T > , T : core :: convert :: AsRef < std :: ffi :: OsStr > {
    std :: env :: join_paths(paths)
        .with_context(|| crate::call_failed!(None::<()>, "std::env::join_paths", crate::CustomDebugMessage("value of type impl IntoIterator")))
}
pub fn set_current_dir_wc < P : core :: convert :: AsRef < std :: path :: Path > > ( path : P ) -> crate :: rewrite_output_type ! ( std :: io :: Result < ( ) > ) {
    let path = path.as_ref();
    std :: env :: set_current_dir(path)
        .with_context(|| crate::call_failed!(None::<()>, "std::env::set_current_dir", path))
}
pub fn var_os_wc < K : core :: convert :: AsRef < std :: ffi :: OsStr > > ( key : K ) -> crate :: rewrite_output_type ! ( core :: option :: Option < std :: ffi :: OsString > ) {
    let key = key.as_ref();
    std :: env :: var_os(key)
        .with_context(|| crate::call_failed!(None::<()>, "std::env::var_os", key))
}
pub fn var_wc < K : core :: convert :: AsRef < std :: ffi :: OsStr > > ( key : K ) -> crate :: rewrite_output_type ! ( core :: result :: Result < std :: string :: String , std :: env :: VarError > ) {
    let key = key.as_ref();
    std :: env :: var(key)
        .with_context(|| crate::call_failed!(None::<()>, "std::env::var", key))
}
